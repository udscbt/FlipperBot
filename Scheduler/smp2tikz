#!/usr/bin/env python
import sys
import re
import argparse
from os.path import join, dirname, basename, abspath
from collections import OrderedDict

#READ CONFIG
configdir = join(dirname(abspath(__file__)), "tex_config")

utils_name = "schemotex.utils.tex"
f = open(join(configdir, utils_name), "r")
utils = f.read()
f.close()

preamble_name = "schemotex.preamble.tex"
f = open(join(configdir, preamble_name), "r")
preamble = f.read()
f.close()

preamble_full_name = "schemotex.preamble.full.tex"
f = open(join(configdir, preamble_full_name), "r")
preamble_full = f.read()
f.close()

f = open(join(configdir, "single.template"), "r")
single = f.read()
f.close()

f = open(join(configdir, "profile.template"), "r")
template = f.read()
f.close()

standalone_name = "schemotex.standalone.tex"
f = open(join(configdir, standalone_name), "r")
standalone = f.read()
f.close()

f = open(join(configdir, "colours.conf"), "r")
colours = f.read()
f.close()
colours = [c for c in colours.split("\n") if not c.startswith("#")]

f = open(join(configdir, "patterns.conf"), "r")
patterns = f.read()
f.close()
patterns = [p for p in patterns.split("\n") if not p.startswith("#")]

job_format = lambda **kwargs: (r"\node [schemo {style}] (j{id}) at ({x},{y}) {{\schemoText{{{job.name}}}}};"+"\n").format(**kwargs)

common_format = r"\node [schemo %(style)s{critsec}] (t{id}) at ({x},{y}) {{\schemoText{{%(label)s}}}};"+"\n"

task_format     = lambda **kwargs: (
  common_format % {
    'style':'task',
    'label':r"%s{mutex}" % ("{node.id}" if showid else "")
  }
).format(**kwargs)
while_format    = lambda **kwargs: (
  common_format % {
    'style':'while',
    'label':r"\texttt{{while}}"
  }
).format(**kwargs)
loop_format     = lambda **kwargs: (
  common_format % {
    'style':'loop',
    'label':r"\texttt{{loop}}"
  }
).format(**kwargs)
if_format       = lambda **kwargs: (
  common_format % {
    'style':'if',
    'label':r"\texttt{{if}}"
  }
).format(**kwargs)
call_format     = lambda **kwargs: (
  common_format % {
    'style':'call',
    'label':r"\begin{{varwidth}}{{\schemoWidth}}call \textrm{{\textit{{{node.name}}}}}\end{{varwidth}}"
  }
).format(**kwargs)
stop_format     = lambda **kwargs: (
  common_format % {
    'style':'stop',
    'label':r""
  }
).format(**kwargs)
return_format   = lambda **kwargs: (
  common_format % {
    'style':'return',
    'label':r""
  }
).format(**kwargs)
shutdown_format = lambda **kwargs: (
  common_format % {
    'style':'shutdown',
    'label':r"!"
  }
).format(**kwargs)

edge_format = lambda **kwargs: (
  r"\draw [schemo edge {style}] (t{src}{anchor1}) to [out={outangle}, in={inangle}]{additional} (t{dst}{anchor2});"+"\n"
).format(**kwargs)

order_format = lambda **kwargs: (
  r"\node [scale=\schemoSmall, {position}] at (t{task.id}.{anchor}) {{\rotatebox{{\schemoRotation}}{{{order}}}}};"+"\n"
).format(
  **kwargs,
  position='right' if kwargs['task'].type == 'stop' else 'above right',
  anchor='east' if kwargs['task'].type == 'stop' else 'north east'
)


#PARAMETERS
showunac = False
showid   = False
showlast = True
showfun  = True
showjob  = True
showadd  = True
showback = True
showord  = True

showcol = True

scale_   = 1
rotation = 0

parser = argparse.ArgumentParser(description='Converts ScheMo .profile files to LaTeX files', prefix_chars='-+')
parser.add_argument('+u', '--show-unaccessible', dest='unac_true', action='store_true',
                    help='Show unaccessible nodes in output')
parser.add_argument('-u', '--hide-unaccessible', dest='unac_false', action='store_false',
                    help='Hide unaccessible nodes from output')
parser.add_argument('+i', '--show-id', dest='id_true', action='store_true',
                    help='Show tasks ID in output')
parser.add_argument('-i', '--hide-id', dest='id_false', action='store_false',
                    help='Hide tasksID nodes from output')
parser.add_argument('+l', '--show-last', dest='last_true', action='store_true',
                    help='Show last task before end of job/function in output')
parser.add_argument('-l', '--hide-last', dest='last_false', action='store_false',
                    help='Hide last task before end of job/function from output')
parser.add_argument('+f', '--show-functions', dest='fun_true', action='store_true',
                    help='Show functions in output')
parser.add_argument('-f', '--hide-functions', dest='fun_false', action='store_false',
                    help='Hide functions from output')
parser.add_argument('+j', '--show-jobs', dest='job_true', action='store_true',
                    help='Show jobs in output')
parser.add_argument('-j', '--hide-jobs', dest='job_false', action='store_false',
                    help='Hide jobs from output')
parser.add_argument('+a', '--show-additional', dest='add_true', action='store_true',
                    help='Show additional edges (break and continue) in output')
parser.add_argument('-a', '--hide-additional', dest='add_false', action='store_false',
                    help='Hide additional edges (break and continue) from output')
parser.add_argument('+b', '--show-backjumps', dest='back_true', action='store_true',
                    help='Show backjumps in output')
parser.add_argument('-b', '--hide-backjumps', dest='back_false', action='store_false',
                    help='Hide backjumps from output')
parser.add_argument('+o', '--show-order', dest='ord_true', action='store_true',
                    help='Show order of execution of tasks (if available)')
parser.add_argument('-o', '--hide-order', dest='ord_false', action='store_false',
                    help='Hide order of execution of tasks (if available)')

parser.add_argument('+c', '--colour', '--color', dest='col_true', action='store_true',
                    help='Make output in colour')
parser.add_argument('-c', '--grayscale', '--greyscale', dest='col_false', action='store_false',
                    help='Make output in grayscale')

parser.add_argument('-s', '--scale', dest='scale', metavar='FACTOR',
                    action='store', default=scale_, type=float,
                    help='Scale factor. [Default: {}]'.format(scale_))
parser.add_argument('-r', '--rotation', dest='rotation', metavar='ANGLE',
                    action='store', default=rotation, type=float,
                    help='Rotation angle. [Default: {}]'.format(rotation))

parser.add_argument('file', metavar='FILE[.profile]', type=str,
                    help='Profile to be processed')

args = parser.parse_args()
scale_ = args.scale
rotation = args.rotation
def mostlyTrue(a, b, c):
  return (a and b) or (b and c) or (a and c)
showunac = mostlyTrue(showunac, args.unac_true, args.unac_false)
showid = mostlyTrue(showid, args.id_true, args.id_false)
showlast = mostlyTrue(showlast, args.last_true, args.last_false)
showfun = mostlyTrue(showfun, args.fun_true, args.fun_false)
showjob = mostlyTrue(showjob, args.job_true, args.job_false)
showadd = mostlyTrue(showadd, args.add_true, args.add_false)
showback = mostlyTrue(showback, args.back_true, args.back_false)

showcol = mostlyTrue(showcol, args.col_true, args.col_false)
if showcol:
  critsec_colours = colours
  critsec_option = "fill="
else:
  critsec_colours = patterns
  critsec_option = "pattern="

critsec_command = r"\schemoColour"
critsec_commands = []
critsec_declarations = []
for i in range(len(critsec_colours)):
  critsec_commands.append(
    critsec_command+"{%d}" % i
  )
  critsec_declarations.append(
    "\\ifnum#1={i} {col}".format(
      i=i,
      col=critsec_colours[i]
    )
  )
critsec_declarations = (
  "\\schemoSet[1]{%(cmd)s}{%%\n  %(def)s%%\n%(fi)s%%\n}" %
  {
    'cmd' : critsec_command,
    'def' : "%\n  \\else".join(critsec_declarations),
    'fi'  : "%\n".join(["  \\fi"]*len(critsec_declarations))
  }
)
critsec_fill = [critsec_option+x for x in critsec_commands]

scale = scale_*scale_
rot = rotation%180
if rot < 45 or rot > 135:
  vertical = True
else:
  vertical = False

def parseName(name):
  if name.startswith("__schemo_"):
    name = name.replace("__schemo_", "")
    auto = True
  else:
    auto = False
  name = name.replace("_", " ").strip().capitalize()
  if auto:
    name = name + " (auto)"
  name = re.sub(r"\bschemo\b", r"ScheMo", name, flags=re.IGNORECASE)
  return name

class Job:
  all = {}
  
  def __init__(self, name, id):
    self.name = parseName(name)
    self.id = id
    Job.all[self.id] = self
    self.first = None
    self.maxpos = 0
    self.maxlev = 0
    self.position = 0
    self.stop = None

class Function:
  all = {}
  
  def __init__(self, name, id):
    self.name = parseName(name)
    self.id = id
    Function.all[self.id] = self
    self.first = None
    self.maxpos = 0
    self.maxlev = 0
    self.position = 0
    self.stop = None

class Task:
  all = {}
  
  def __init__(self, name=None, id=None):
    if name is not None:
      self.name = parseName(name)
    else:
      self.name = None
    if id is None:
      id = max(Task.all.keys())+1
    self.id = id
    self._in = []
    self._out = []
    self.a_in = []
    self.a_out = []
    Task.all[self.id] = self
    self.level = 0
    self.position = 0
    self.job = None
    self.type = 'task'
    self.order = []
    self.visited = False
    self.mutexes = []
    self.crit = []
  
  def enter(self, task, jump=False):
    if jump:
      if task not in self.a_in:
        self.a_in.append(task)
    else:
      if task not in self._in:
        self._in.append(task)
  
  def exit(self, task, jump=False):
    if jump:
      if task not in self.a_out:
        self.a_out.append(task)
    else:
      if task not in self._out:
        self._out.append(task)
  
  def setPosition(self, position):
    self.position = position*scale_
    if self.job is not None and self.job.maxpos < position:
      self.job.maxpos = position
  
  def setLevel(self, level):
    self.level = level
    if self.job is not None and self.job.maxlev < level:
      self.job.maxlev = level

def readLine(f):
  line = f.readline()
  while line.startswith("#") or (line.replace(" ", "").replace("\t", "") == '\n'):
    line = f.readline()
  return line.strip()

mutexes = []
def parseFlow(flow, start, level, parent):
  global current
  global mutexes
  inner = (flow[start] == '[')
  i = start+1 if inner else start
  last = None
  while True:
    if last is None:
      last = parent
    current = last
    current.crit = current.crit + [m for m in mutexes if m not in current.crit]
    if flow[i] == 'S':
      if inner:
        raise Exception("Job stopped while in inner block")
      else:
        if showlast:
          last.exit(parent.job.stop)
          parent.job.stop.enter(last)
          parent.job.stop.setPosition(parent.job.maxpos+1)
        else:
          s = parent.job.stop
          for t in s._in:
            if t != last:
              last.enter(t)
              t.exit(last)
            t._out.remove(s)
          for t in s._out:
            if t != last:
              last.exit(t)
              t.enter(last)
            t._in.remove(s)
          for t in s.a_in:
            if t != last:
              last.enter(t, jump=True)
              t.exit(last, jump=True)
            t.a_out.remove(s)
          for t in s.a_out:
            if t != last:
              last.exit(t, jump=True)
              t.enter(last, jump=True)
            t.a_in.remove(s)
          last.type = 'stop'
          parent.job.stop = last
          Task.all.pop(s.id)
        return None
    elif flow[i] == ']':
      if inner:
        if last is not None:
          if parent.type == 'while' or parent.type == 'loop':
            parent.enter(last)
            last.exit(parent)
        return i
      else:
        raise Exception("End of block encountered while outside of block")
    elif flow[i] == 'W':
      t = Task()
      t.type = 'while'
      t.job = parent.job
      t.setPosition(parent.job.maxpos+1)
      t.setLevel(level)
      last.exit(t)
      t.enter(last)
      last = t
      i = parseFlow(flow, i+1, level+1, last)
    elif flow[i] == 'L':
      t = Task()
      t.type = 'loop'
      t.job = parent.job
      t.setPosition(parent.job.maxpos+1)
      t.setLevel(level)
      last.exit(t)
      t.enter(last)
      last = t
      i = parseFlow(flow, i+1, level+1, last)
    elif flow[i] == 'I':
      t = Task()
      t.type = 'if'
      t.job = parent.job
      t.setPosition(parent.job.maxpos+1)
      t.setLevel(level)
      last.exit(t)
      t.enter(last)
      last = t
      i = parseFlow(flow, i+1, level+1, last)
      ti = current
      if flow[i+1] == '[':
        i = parseFlow(flow, i+1, level-1, last)
        last = current
      tn = Task.all[int(flow[i+1])]
      ti.exit(tn)
      tn.enter(ti)
    elif flow[i] == 'F':
      fun = Function.all[int(flow[i+2])]
      i = i + 3
      t = Task(name=fun.name)
      t.type = 'call'
      t.job = parent.job
      t.setPosition(parent.job.maxpos+1)
      t.setLevel(level)
      last.exit(t)
      t.enter(last)
      last = t
    elif flow[i] == 'C':
      if inner:
        t = Task.all[int(flow[i+2])]
        w = None
        for w in Task.all.values():
          if w.type == 'while' or w.type == 'loop':
            if t in w._out:
              break
        if w is not None:
          last.exit(w, jump=True)
          w.enter(last, jump=True)
        i = i + 3
      else:
        raise Exception("Continue found outside of cycle")
    elif flow[i] == 'B':
      if inner:
        t = Task.all[int(flow[i+2])]
        last.exit(t, jump=True)
        t.enter(last, jump=True)
        i = i + 3
      else:
        raise Exception("Break found outside of cycle")
    elif flow[i] == 'R':
      t = parent.job.stop
      last.exit(t, jump=True)
      t.enter(last, jump=True)
    elif flow[i] == 'S!':
      last.type = 'shutdown'
    elif flow[i] == 'CS':
      m = int(flow[i+2])
      last.mutexes.append((m, True))
      mutexes.append(m)
      i = i + 3
    elif flow[i] == 'CE':
      m = int(flow[i+2])
      last.mutexes.append((m, False))
      mutexes.remove(m)
      i = i + 3
    else:
      try:
        t = Task.all[int(flow[i])]
      except:
        raise Warning("Unrecognized token: {}".format(flow[i]))
      t.job = parent.job
      t.setPosition(parent.job.maxpos+1)
      t.setLevel(level)
      if not (last.level == t.level and last.type == 'loop'):
        last.exit(t)
        t.enter(last)
      last = t
    i = i+1

profile = args.file
basedir = dirname(abspath(profile))
profile = basename(profile)
if profile.endswith(".profile"):
  profile = profile[:-len(".profile")]
f = open(profile+".profile", "r")

line = readLine(f)
jobn = int(line)
for j in range(jobn):
  line = readLine(f)
  name, id = line.split("\t")
  job = Job(name, int(id))
  #~ job.position = jobn-int(j)-1
line = readLine(f)
funn = int(line)

for i in range(funn):
  line = readLine(f)
  name, id = line.split("\t")
  fun = Function(name, int(id))
  #~ fun.position = funn-int(i)-1

line = readLine(f)
taskn = int(line)
for t in range(taskn):
  line = readLine(f)
  name, id = line.split("\t")
  task = Task(name, int(id))

line = readLine(f)
mutexn = int(line)
for m in range(mutexn):
  line = readLine(f)
  #TODO

for j in range(jobn):
  line = readLine(f)
  job, flow = line.split("\t")
  job = Job.all[int(job)]
  job.stop = Task()
  job.stop.type = 'stop'
  job.stop.job = job
  flow = flow.split(" ")
  current = Task.all[int(flow[0])]
  current.position = 0
  current.level = 0
  current.job = job
  job.first = current
  parseFlow(flow, 1, 0, current)

for i in range(funn):
  line = readLine(f)
  fun, flow = line.split("\t")
  fun = Function.all[int(fun)]
  fun.stop = Task()
  fun.stop.type = 'stop'
  fun.stop.job = fun
  flow = flow.split(" ")
  current = Task.all[int(flow[0])]
  current.position = 0
  current.level = 0
  current.job = fun
  fun.first = current
  parseFlow(flow, 1, 0, current)

line = readLine(f)
line = readLine(f)
i = 1
while line != '':
  try:
    job, task, start, end = line.split('\t')
  except:
    for t in Task.all.values():
      t.order = []
    i = 1
    line = readLine(f)
    continue
  Task.all[int(task)].order.append(i)
  i = i+1
  line = readLine(f)

f.close()

maxlev = 0
maxpos = 0
for j in Job.all.values():
  maxlev = j.maxlev if j.maxlev > maxlev else maxlev
  maxpos = j.maxpos if j.maxpos > maxpos else maxpos
maxlev = maxlev + 1
maxpos = maxpos + 1

def addNode(t, graph):
  if t.type == 'task':
    node_format = task_format
  elif t.type == 'while':
    node_format = while_format
  elif t.type == 'loop':
    node_format = loop_format
  elif t.type == 'if':
    node_format = if_format
  elif t.type == 'call':
    node_format = call_format
  elif t.type == 'stop':
    if isinstance(j, Job):
      node_format = stop_format
    elif isinstance(j, Function):
      node_format = return_format
  elif t.type == 'shutdown':
    node_format = shutdown_format
  lock = False
  unlock = False
  colour = ""
  if len(t.crit) > 0:
    colour = critsec_fill[t.crit[-1]%len(critsec_fill)]
  for m in t.mutexes:
    if m[1]:
      lock = True
    else:
      unlock = True
  graph = graph + node_format(
    id=t.id,
    x=2*(t.position+(1 if vertical else 0.5)),
    y=t.level,
    node=t,
    mutex="{}{}{}".format(
      " " if (showid and (lock or unlock)) else "",
      r"\faLock" if lock else "",
      r"\faUnlockAlt" if unlock else ""
    ),
    critsec=", {}".format(colour) if len(t.crit)>0 else ""
  )
  if showord:
    if len(t.order)>3:
      order = "{}, {} ... {}".format(t.order[0], t.order[1], t.order[-1])
    else:
      order = ", ".join(map(str, t.order))
    graph = graph + order_format(
      task=t,
      order=order
    )
  return graph

def addEdges(t, graph):
  for t2 in (t.a_out if showadd else []):
    anchor1 = ""
    anchor2 = ""
    additional = ""
    if t2.position > t.position:
      if t2.type == 'stop':
        outangle = -90
        inangle = -135
        text = ''
        if isinstance(j, Job):
          text = 'exit'
        elif isinstance(j, Function):
          if j.stop in t._out:
            continue
          text = 'return'
        additional = r" node [scale=\schemoSmall, at start, below right] {\schemoText{%s}}" % text
      else:
        outangle = -90
        inangle = 180
        additional = r" node [scale=\schemoSmall, at start, below right] {\rotatebox{\schemoRotation}{break}}"
    elif showback:
      outangle = 90
      inangle = 90
      additional = r" node [scale=\schemoSmall, at start, above left] {\schemoText{continue}}"
    else:
      continue
    graph = graph + edge_format(
      style='jump',
      src=t.id,
      anchor1=anchor1,
      dst=t2.id,
      anchor2=anchor2,
      outangle=outangle,
      inangle=inangle,
      additional=additional
    )
  for t2 in t._out:
    outangle = 0
    inangle = 180
    anchor1 = ""
    anchor2 = ""
    additional = ""
    if t2.level < t.level:
      if t2.type == 'while' or t2.type == 'loop':
        if not showback:
          continue
        outangle = 90
        inangle = 90
        anchor2 = ".north"
      else:
        outangle = 0
        inangle = 135
    if t.type == 'if':
      if t2.level > t.level:
        outangle = 90
        inangle = 180
        anchor1 = ".north"
        additional = r" node [scale=%f, at start, above left] {\rotatebox{%s}{true}}" % (scale*2/3, rotation)
      else:
        outangle = -90
        if t2.level < t.level:
          inangle = 180
        else:
          inangle = -135
        anchor1 = ".south"
        additional = r" node [scale=%f, at start, below left] {\rotatebox{%s}{false}}" % (scale*2/3, rotation)
    elif t.type == 'while':
      if t2.level > t.level:
        outangle = 0
        inangle = -90
        anchor1 = ".east"
        additional = r" node [scale=%f, at start, below right] {\rotatebox{%s}{true}}" % (scale*2/3, rotation)
      else:
        outangle = -90
        inangle = -135
        anchor1 = ".south"
        additional = r" node [scale=%f, at start, below left] {\rotatebox{%s}{false}}" % (scale*2/3, rotation)
    elif t.type == 'loop':
      if t2.level > t.level:
        outangle = 0
        inangle = -90
        anchor1 = ".east"
      else:
        continue
    else:
      if t2.level > t.level:
        outangle = 0
        inangle = -135
    graph = graph + edge_format(
      style='normal',
      src=t.id,
      anchor1=anchor1,
      dst=t2.id,
      anchor2=anchor2,
      outangle=outangle,
      inangle=inangle,
      additional=additional,
      scale=scale
    )
  return graph

graphs = OrderedDict()
l = []
if showfun:
  l = l + list(Function.all.values())
if showjob:
  l = l + list(Job.all.values())
for j in (l):
  graph = ""
  if isinstance(j, Job):
    style='job'
  elif isinstance(j, Function):
    style='function'
  graph = graph + job_format(
    style=style,
    id=j.id,
    x=0,
    y=0,
    job=j,
    scale=scale,
    rotation=rotation
  )
  
  tasks = []
  if showunac:
    for t in Task.all.values():
      if t.job != j:
        continue
      tasks.append(t)
  else:
    ts = [j.first]
    while len(ts) > 0:
      t = ts.pop(0)
      if t.visited:
        continue
      t.visited = True
      tasks.append(t)
      for t2 in t._out:
        ts.append(t2)
      for t2 in t.a_out:
        ts.append(t2)
  
  for t in tasks:
    graph = addNode(t, graph)
  for t in tasks:
    graph = addEdges(t, graph)
  
  name = "{}_{}.tex".format(
    j.__class__.__name__,
    j.id
  )
  graphs[name] = graph.replace("_", r"\_")

outdir = basedir
commands = {
  'base'    : scale_,
  'rotation' : rotation,
  'colours'  : critsec_declarations,
}

f = open(join(outdir, utils_name), "w")
f.write(utils)
f.close()

f = open(join(outdir, preamble_name), "w")
f.write(preamble)
f.close()

f = open(join(outdir, preamble_full_name), "w")
f.write(preamble_full)
f.close()

for name, graph in graphs.items():
  f = open(join(outdir, profile+"."+name), "w")
  f.write(single % {'graph' : graph, **commands})
  f.close()

graph = ((r'\\' if vertical else '&') + "\n").join([r"\adjustbox{valign=t}{\input{\schemoName.%s}}" % name for name in graphs.keys()])

if vertical:
  tab_format = '{l}'
else:
  tab_format = '{'+':'.join(['c']*len(l))+'}'

f = open(join(outdir, profile+".tex"), "w")
f.write(
  template % {
    'format'  : tab_format,
    'content' : graph,
  }
)
f.close()

f = open(join(outdir, standalone_name), "w")
f.write(standalone)
f.close()
