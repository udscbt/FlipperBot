#include "schemo.h"
#include "fbcp.common.h"
#include "FBNet.h"

#include <ESP8266WiFi.h>

#define DEBUG(x) Serial.println(x);Serial.flush();

const int INTER_AXIS_INTERVAL = 10;
const int INTER_READ_INTERVAL = INTER_AXIS_INTERVAL;

const char inPin = A0;
const char selPin = 12;

int horizontalValue;
int verticalValue;

char lOut;
char rOut;
char uOut;
char dOut;

fbcp::string fbcp::serial;
const char serial[] = "00001";
fbcp::string ssid;
bool AP = true;

const IPAddress host(
  FBNet::GATEWAY[0],
  FBNet::GATEWAY[1],
  FBNet::GATEWAY[2],
  FBNet::GATEWAY[3]
);
const IPAddress gateway(
  FBNet::GATEWAY[0],
  FBNet::GATEWAY[1],
  FBNet::GATEWAY[2],
  FBNet::GATEWAY[3]
);
const IPAddress submask(
  FBNet::NETMASK[0],
  FBNet::NETMASK[1],
  FBNet::NETMASK[2],
  FBNet::NETMASK[3]
);

WiFiClient sockOut;

enum
{
  IDLE,
  GAME,
  STANDALONE
} mode = IDLE;

@DECLARE

#define VAR(x) readCommand_ ## x
fbcp::string VAR(msg);
bool VAR(end);
int VAR(nc);
char VAR(c);
int VAR(i);
unsigned long VAR(t);

@FUNCTION(readCommand)
@PARAM(sock:WiFiClient*)
@PARAM(cmd:fbcp::COMMAND_LINE*)
@PARAM(timeout:unsigned long)
@RETURN(bool)
{
  
  VAR(msg) = "";
  VAR(end) = false;
  VAR(t) = millis();
  @WHILE (!VAR(end) && millis() - VAR(t) < @PARAM(timeout))
  {
    VAR(nc) = @PARAM(sock)->available();
    VAR(i) = 0;
    @WHILE (!VAR(end) && VAR(i) < VAR(nc))
    {
      VAR(c) = @PARAM(sock)->read();
      VAR(msg) += VAR(c);
      
      if (VAR(c) == '\n' or VAR(c) == '\0')
      {
        VAR(end) = true;
      }
      
      ++VAR(i);
    }
  }
  
  @IF (VAR(c) == '\0')
  {
    Serial.println("Remote host said something REALLY strange :S");
    @RETURN(false);
  }
  
  @RETURN(fbcp::parseCommand(VAR(msg), *@PARAM(cmd)));
}
#undef VAR

#define VAR(x) tryConnect_ ## x
unsigned long VAR(t1);
unsigned long VAR(t2);

fbcp::COMMAND_LINE VAR(cmd);

int VAR(i);
int VAR(nc);
bool VAR(end);
fbcp::string VAR(msg);

#define PARAM(x) tryConnect_ ## x
fbcp::string PARAM(ssid);

@FUNCTION(tryConnect)
@RETURN(bool)
{  
  // Connect to network
  Serial.print("Connecting to ");
  Serial.println(PARAM(ssid).c_str());
  
  WiFi.begin(PARAM(ssid).c_str());
  VAR(t1) = millis();
  @WHILE (WiFi.status() != WL_CONNECTED && millis() - VAR(t1) < 10000) {
    VAR(t2) = millis();
    @WHILE (millis() - VAR(t2) < 500) {}
    Serial.print(".");
  }

  
  Serial.println("");
  @IF (WiFi.status() != WL_CONNECTED)
  {
    Serial.println("Timeout");
    @RETURN(false);
  }
  Serial.println("WiFi connected");  
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  
  @TBREAK
  
  @IF (!sockOut.connect(gateway, FBNet::PORT))
  {
    Serial.println("Can't connect to server");
    @RETURN(false);
  }
  
  VAR(cmd).command = &fbcp::Q_SINGLE_PRESENTATION;
  VAR(cmd).params["serial"] = fbcp::serial;
  sockOut.print(fbcp::writeCommand(VAR(cmd)).c_str());
  
  @CALL(readCommand;&sockOut;&VAR(cmd);2000):understood;
  if (!understood)
  {
    Serial.println("Couldn't understand server response");
    @RETURN(false);
  }
  @IF (VAR(cmd).command->code == fbcp::A_GRANT_ACCESS.code)
  {
    Serial.println("Server allowed connection");
    @RETURN(true);
  }
  @IF (VAR(cmd).command->code == fbcp::A_DENY_ACCESS.code)
  {
    Serial.println("Server refused connection");
    @RETURN(false);
  }
  Serial.println("Server answered something strange :S");
  @RETURN(false);
}
#undef VAR
#undef PARAM

@JOB (job_network)
{
  @MEMORY
  {
    @VAR(i:int)
    @VAR(n:int)
    @VAR(connected:bool)
  }

  @WHILE (mode == IDLE)
  {
    /////////////////
    // WiFi discovery:
    //WiFi.mode(WIFI_STA);
    //WiFi.disconnect();  
    Serial.println("Scan start");

    DEBUG("A")
    delay(10);
    @VAR(n) = WiFi.scanNetworks();
    DEBUG("TEST")
    Serial.println("Scan done");
    @IF (@VAR(n) == 0)
    {
      Serial.println("No networks found");
    }
    @IF (@VAR(n) != 0)
    {
      Serial.print(@VAR(n));
      Serial.println(" networks found");
      @VAR(i) = 0;
      @VAR(connected) = false;
      @WHILE (@VAR(i) < @VAR(n) && !@VAR(connected))
      {
        // Print SSID and RSSI for each network found
        Serial.print(@VAR(i) + 1);
        Serial.print(": ");
        ssid = WiFi.SSID(@VAR(i)).c_str();
        Serial.print(ssid.c_str());
        Serial.print(" (");
        Serial.print(WiFi.RSSI(@VAR(i)));
        Serial.print(")");
        bool noenc = (WiFi.encryptionType(@VAR(i)) == ENC_TYPE_NONE);
        Serial.println(noenc?" ":"*");
        // Search for suitable network
        @IF (noenc)
        {
          @IF (ssid.startsWith(fbcp::BOARD_PREFIX))
          {
            Serial.println("Found suitable board network");
            tryConnect_ssid = ssid;
            @CALL(tryConnect):connected;
            @VAR(connected) = connected;
            if (connected)
            {
              mode = GAME;
              Serial.println("Connection estabilished");
              Serial.println("Getting into Game mode");
              
              schemo::schedule_job(job_client);
            }
            else
            {
              Serial.println("Connection failed");
            }
          }

          @IF (ssid.startsWith(fbcp::ROBOT_PREFIX))
          {
            Serial.println("Found suitable robot network");
            tryConnect_ssid = ssid;
            @CALL(tryConnect):connected;
            @VAR(connected) = connected;
            if (connected)
            {
              mode = STANDALONE;
              Serial.println("Connection estabilished");
              Serial.println("Getting into Stand Alone mode");
              
              schemo::schedule_job(job_client);
            }
            else
            {
              Serial.println("Connection failed");
            }
          }
        }
        
        ++@VAR(i);
      }
    }
    Serial.println("");
    /////////////////
  }
}

@JOB(job_client)
{
  //~ @MEMORY
  //~ {
    //~ @VAR(cmd:fbcp::COMMAND_LINE)
    //~ @VAR(t:unsigned long)
    //~ @VAR(end:bool)
    //~ @VAR(read:bool)
  //~ }
  
  //~ @WHILE (sockOut.connected())
  //~ {
    //~ @VAR(cmd).command = &fbcp::Q_ROBOT_COMMAND;

    //~ digitalWrite(selPin, LOW);
    //~ horizontalValue = analogRead(inPin);
    //~ @VAR(t) = millis();
    //~ @WHILE (millis() - @VAR(t) < INTER_AXIS_INTERVAL) {}
    //~ digitalWrite(selPin, HIGH);
    //~ verticalValue = analogRead(inPin);
    //~ lOut = LOW;
    //~ rOut = LOW;
    //~ uOut = LOW;
    //~ dOut = LOW;
    //~ if (horizontalValue < 256)
    //~ {
      //~ lOut = HIGH;
    //~ }
    //~ else if (horizontalValue > 768)
    //~ {
      //~ rOut = HIGH;
    //~ }

    //~ if (verticalValue < 156)
    //~ {
      //~ dOut = HIGH;
    //~ }
    //~ else if (verticalValue > 768)
    //~ {
      //~ uOut = HIGH;
    //~ }

    //~ Serial.print("Horizontal value: ");
    //~ Serial.print(horizontalValue);
    //~ Serial.print(" | ");
    //~ Serial.print(lOut?"LEFT":rOut?"RIGHT":"CENTRE");
    //~ Serial.print("Vertical value: ");
    //~ Serial.print(verticalValue);
    //~ Serial.print(" | ");
    //~ Serial.print(uOut?"UP":dOut?"DOWN":"CENTRE");

    //~ if (uOut)
    //~ {
      //~ if (lOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_FORWARD_LEFT.str;
      //~ }
      //~ else if (rOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_FORWARD_RIGHT.str;
      //~ }
      //~ else
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_FORWARD.str;
      //~ }
    //~ }
    //~ else if (dOut)
    //~ {
      //~ if (lOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_BACKWARD_LEFT.str;
      //~ }
      //~ else if (rOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_BACKWARD_RIGHT.str;
      //~ }
      //~ else
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_BACKWARD.str;
      //~ }
    //~ }
    //~ else
    //~ {
      //~ if (lOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_LEFT.str;
      //~ }
      //~ else if (rOut)
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_RIGHT.str;
      //~ }
      //~ else
      //~ {
        //~ @VAR(cmd).params["direction"] = fbcp::DIRECTION_STOP.str;
      //~ }
    //~ }

    //~ Serial.print("Sent: ");
    //~ fbcp::string s = fbcp::writeCommand(@VAR(cmd));
    //~ Serial.println(s.c_str());
    //~ sockOut.print(s.c_str());

    //~ @VAR(t) = millis();
    //~ @WHILE (millis() - @VAR(t) < INTER_READ_INTERVAL) {}
  //~ }
  
  //~ mode = IDLE;
}

void setup()
{
  // Initialise serial communication
  Serial.begin(115200);
  delay(10);

  DEBUG("Starting")

  // Initialise pins
  pinMode(selPin, OUTPUT);
  
  // FBCP
  DEBUG("FBCP")
  fbcp::serial = fbcp::CONTR_PREFIX;
  fbcp::serial += serial;
  mode = IDLE;
  
  //ScheMo
  DEBUG("ScheMo")
  @INIT
  DEBUG("Initialized")
  
  schemo::schedule_job(job_network);

  DEBUG("Scheduled")
  
  schemo::start_cycle();

  DEBUG("Ended")
}

void loop()
{
  
}
